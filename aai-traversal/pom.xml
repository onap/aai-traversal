<?xml version="1.0" encoding="UTF-8"?>
<!--

    ============LICENSE_START=======================================================
    org.onap.aai
    ================================================================================
    Copyright Â© 2019 AT&T Intellectual Property. All rights reserved.
    ================================================================================
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    ============LICENSE_END=========================================================

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.onap.aai.traversal</groupId>
		<artifactId>traversal</artifactId>
		<version>1.16.1-SNAPSHOT</version>
	</parent>
	<groupId>org.onap.aai.traversal</groupId>
	<artifactId>aai-traversal</artifactId>

	<properties>
		<java.version>17</java.version>
		<start-class>org.onap.aai.TraversalApp</start-class>

		<maven.skip.tests>true</maven.skip.tests>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>

		<!-- End of the jacoco plugin properties -->

		<!-- Default docker registry that maven fabric plugin will try to pull
			from -->
		<docker.registry>docker.io</docker.registry>
		<!-- Specifying the docker push registry where the image should be pushed -->
		<!-- This value should be overwritten at runtime to wherever need to be
			pushed to -->
		<docker.push.registry>localhost:5000</docker.push.registry>
		<aai.docker.version>1.0.0</aai.docker.version>

		<!-- Location where assembly of our scripts, resources and main jar will
			be held Check the ${project.artifactId}/src/main/assembly/descriptor.xml
			for more info -->
		<aai.build.directory>${project.build.directory}/${project.artifactId}-${project.version}-build/</aai.build.directory>
		<aai.docker.version>1.0.0</aai.docker.version>
		<aai.docker.namespace>onap</aai.docker.namespace>

		<!-- Nexus Proxy Properties and Snapshot Locations Ideally this can be
			overwritten at runtime per internal environment specific values at runtime -->
		<nexusproxy>https://nexus.onap.org</nexusproxy>
		<site.path>/content/sites/site/org/onap/aai/traversal/${project.artifactId}/${project.version}</site.path>
		<release.path>/content/repositories/releases/</release.path>
		<snapshot.path>/content/repositories/snapshots/</snapshot.path>

		<!-- This will be used for the docker images as the default format of maven
			build has issues -->
		<maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>

		<antlr4.visitor>true</antlr4.visitor>
		<antlr4.listener>true</antlr4.listener>

		<snapshot.file>${project.basedir}/snapshots/data.graphson</snapshot.file>
		<jacoco.line.coverage.limit>0.61</jacoco.line.coverage.limit>

		<!-- Start of Default ONAP Schema Properties -->
		<schema.source.name>onap</schema.source.name>
		<schema.configuration.location>N/A</schema.configuration.location>
		<schema.nodes.location>${project.basedir}/src/main/resources/schema/${schema.source.name}/oxm</schema.nodes.location>
		<schema.edges.location>${project.basedir}/src/main/resources/schema/${schema.source.name}/dbedgerules</schema.edges.location>
		<schema.version.depth.start>v10</schema.version.depth.start>
		<schema.version.related.link.start>v10</schema.version.related.link.start>
		<schema.version.app.root.start>v11</schema.version.app.root.start>
		<schema.version.namespace.change.start>v12</schema.version.namespace.change.start>
		<schema.version.edge.label.start>v12</schema.version.edge.label.start>
		<schema.version.api.default>v30</schema.version.api.default>
		<schema.version.list>v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29,v30</schema.version.list>
		<schema.uri.base.path>/aai</schema.uri.base.path>

		<!-- versions -->
		<!-- <janusgraph.version>1.0.0</janusgraph.version>
		<gremlin.version>3.7.1</gremlin.version> -->

		<spring-cloud.version>2022.0.5</spring-cloud.version>

		<!-- fix the driver version to match the one defined in janusgraph-cql
				spring-boot (2.6) is otherwise downgrading it to 4.13.0 -->
		<!-- see https://github.com/spring-projects/spring-boot/blob/f8c9fee3b0c8ff9ef48cf12fb4a9f8a51630a485/spring-boot-project/spring-boot-dependencies/build.gradle#L170 -->
		<!-- see https://github.com/JanusGraph/janusgraph/blob/6105d67f412def90ed6e704fa01cbf656602e6c9/pom.xml#L112 -->
		<cassandra-driver.version>4.17.0</cassandra-driver.version>
		<datastax.native-protocol.version>1.5.1</datastax.native-protocol.version>

		<antlr.version>4.13.2</antlr.version>

		<mockito.core.version>3.4.0</mockito.core.version>

		<!-- Integration tests will be skipped by default. Could be enabled here or by -DskipITs=false-->
		<skipITs>true</skipITs>
	</properties>
	<profiles>
		<!-- Docker profile to be used for building docker image and pushing to
			nexus -->
		<profile>
			<id>docker</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.groovy.maven</groupId>
						<artifactId>gmaven-plugin</artifactId>
						<version>1.0</version>
						<executions>
								<execution>
										<phase>pre-clean</phase>
								</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<configuration>
							<verbose>true</verbose>
							<apiVersion>1.23</apiVersion>
							<images>
								<image>
									<name>${docker.push.registry}/${aai.docker.namespace}/${project.artifactId}:%l</name>
									<build>
										<filter>@</filter>
										<tags>
											<tag>latest</tag>
											<tag>${project.docker.latesttag.version}</tag>
											<tag>${project.major.version}.${project.minor.version}-STAGING-${maven.build.timestamp}</tag>
										</tags>
										<cleanup>try</cleanup>
										<dockerFileDir>${project.basedir}/src/main/docker</dockerFileDir>
										<assembly>
											<inline>
												<fileSets>
													<fileSet>
														<directory>${aai.build.directory}</directory>
														<outputDirectory>/${project.artifactId}</outputDirectory>
													</fileSet>
												</fileSets>
											</inline>
										</assembly>
									</build>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>clean-images</id>
								<phase>pre-clean</phase>
								<goals>
									<goal>remove</goal>
								</goals>
								<configuration>
									<removeAll>true</removeAll>
								</configuration>
							</execution>
							<execution>
								<id>generate-images</id>
								<phase>verify</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>push-images</id>
								<phase>deploy</phase>
								<goals>
									<goal>push</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- Start of ONAP Profile -->
		<profile>
			<id>onap</id>
			<properties>
				<schema.source.name>onap</schema.source.name>
				<schema.version.namespace.change.start>v12</schema.version.namespace.change.start>
				<schema.version.list>v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29,v30</schema.version.list>
			</properties>
		</profile>
		<!-- End of ONAP Profile -->
		<profile>
			<id>runAjsc</id>
			<properties>
				<skipTests>${maven.skip.tests}</skipTests>
			</properties>
			<build>
				<defaultGoal>pre-integration-test</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.6.0</version>
						<executions>
							<execution>
								<id>run-spring-boot</id>
								<phase>package</phase>
								<goals>
									<goal>java</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<mainClass>${start-class}</mainClass>
							<systemProperties>
								<property>
									<key>snapshot.location</key>
									<value>${snapshot.file}</value>
								</property>
								<property>
									<key>schema.source.name</key>
									<value>${schema.source.name}</value>
								</property>
								<property>
									<key>schema.configuration.location</key>
									<value>${schema.configuration.location}</value>
								</property>
								<property>
									<key>schema.nodes.location</key>
									<value>${schema.nodes.location}</value>
								</property>
								<property>
									<key>schema.edges.location</key>
									<value>${schema.edges.location}</value>
								</property>
								<property>
									<key>schema.version.depth.start</key>
									<value>${schema.version.depth.start}</value>
								</property>
								<property>
									<key>schema.version.related.link.start</key>
									<value>${schema.version.related.link.start}</value>
								</property>
								<property>
									<key>schema.version.app.root.start</key>
									<value>${schema.version.app.root.start}</value>
								</property>
								<property>
									<key>schema.version.namespace.change.start</key>
									<value>${schema.version.namespace.change.start}</value>
								</property>
								<property>
									<key>schema.version.edge.label.start</key>
									<value>${schema.version.edge.label.start}</value>
								</property>
								<property>
									<key>schema.version.api.default</key>
									<value>${schema.version.api.default}</value>
								</property>
								<property>
									<key>schema.version.list</key>
									<value>${schema.version.list}</value>
								</property>
								<property>
									<key>schema.uri.base.path</key>
									<value>${schema.uri.base.path}</value>
								</property>
							</systemProperties>
							<executable>java</executable>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-jersey2</artifactId>
			<version>1.8.13</version>
		</dependency>
		<dependency>
				<groupId>org.apache.httpcomponents.client5</groupId>
				<artifactId>httpclient5</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.ws.rs</groupId>
			<artifactId>jakarta.ws.rs-api</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.xml.bind</groupId>
			<artifactId>jakarta.xml.bind-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-access</artifactId>
		</dependency>
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>6.6</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>janino</artifactId>
			<version>3.1.12</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>jakarta.json</artifactId>
			<version>2.0.1</version>
		</dependency>
		<dependency>
			<groupId>org.janusgraph</groupId>
			<artifactId>janusgraph-cql</artifactId>
		</dependency>
		<dependency>
			<groupId>org.janusgraph</groupId>
			<artifactId>janusgraph-inmemory</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tinkerpop</groupId>
			<artifactId>gremlin-driver</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.jakarta.rs</groupId>
			<artifactId>jackson-jakarta-rs-json-provider</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>eclipselink</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>org.eclipse.persistence.moxy</artifactId>
		</dependency>
		<dependency>
			<groupId>org.javatuples</groupId>
			<artifactId>javatuples</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
		</dependency>
		<dependency>
			<groupId>com.bazaarvoice.jolt</groupId>
			<artifactId>jolt-complete</artifactId>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
		</dependency>
		<dependency>
			<groupId>org.onap.aai.aai-common</groupId>
			<artifactId>aai-core</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-web</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.onap.aai.aai-common</groupId>
			<artifactId>aai-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jersey</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
				<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-configuration-processor</artifactId>
				<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing-bridge-brave</artifactId>
      <version>1.0.12</version>
		</dependency>
		<dependency>
			<groupId>io.zipkin.reporter2</groupId>
			<artifactId>zipkin-reporter-brave</artifactId>
		</dependency>
		<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>com.vaadin.external.google</groupId>
					<artifactId>android-json</artifactId>
				</exclusion>
			</exclusions>
    </dependency>
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr4-runtime</artifactId>
			<version>${antlr.version}</version>
		</dependency>
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr4-maven-plugin</artifactId>
			<version>${antlr.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.sonatype.sisu</groupId>
					<artifactId>sisu-guava</artifactId>
				</exclusion>
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.tinkerpop</groupId>
			<artifactId>gremlin-core</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.tinkerpop</groupId>
			<artifactId>tinkergraph-gremlin</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.tinkerpop</groupId>
			<artifactId>gremlin-groovy</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<!-- TODO: Migrate tests to junit 5 and remove this dependency -->
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.36</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>io.swagger.core.v3</groupId>
			<artifactId>swagger-jaxrs2-jakarta</artifactId>
			<version>2.2.35</version>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- cassandra driver -->
			<dependency>
					<groupId>com.datastax.oss</groupId>
					<artifactId>java-driver-core</artifactId>
					<version>${cassandra-driver.version}</version>
			</dependency>
			<dependency>
					<groupId>com.datastax.oss</groupId>
					<artifactId>java-driver-query-builder</artifactId>
					<version>${cassandra-driver.version}</version>
			</dependency>
			<!-- /cassandra driver -->
		</dependencies>
	</dependencyManagement>
	<build>
		<resources>
			<resource>
				<directory>${project.basedir}/src/main/swm</directory>
				<targetPath>${project.build.directory}/swm</targetPath>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<includes>
					<include>application.properties</include>
					<include>dme2.properties</include>
					<include>logback.xml</include>
					<include>localhost-access-logback.xml</include>
				</includes>
				<targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig</targetPath>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
				<includes>
					<include>**/*</include>
				</includes>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources/etc/appprops/</directory>
				<includes>
					<include>janusgraph-realtime.properties</include>
					<include>janusgraph-cached.properties</include>
					<include>aaiconfig.properties</include>
				</includes>
				<targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig</targetPath>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources/etc/auth/</directory>
				<includes>
					<include>aai_policy.json</include>
				</includes>
				<targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig</targetPath>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources/</directory>
				<includes>
					<include>logback.xml</include>
					<include>localhost-access-logback.xml</include>
				</includes>
				<targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig</targetPath>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources/schema/</directory>
				<includes>
					<include>**/oxm/**/*.xml</include>
					<include>**/dbedgerules/**/*.json</include>
					<include>**/query/**</include>
				</includes>
				<targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig/schema</targetPath>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/resources/query/</directory>
				<includes>
					<include>**/*.json</include>
				</includes>
				<targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig/query</targetPath>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>${project.basedir}/src/main/docker</directory>
				<includes>
					<include>**/*</include>
				</includes>
				<targetPath>${aai.build.directory}</targetPath>
				<filtering>true</filtering>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>com.mycila</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<configuration>
						<header>LICENSE.TXT</header>
						<includes>
							<include>src/main/java/**</include>
							<include>src/test/java/**</include>
							<include>pom.xml</include>
						</includes>
						<skipExistingHeaders>true</skipExistingHeaders>
						<skip>false</skip>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.groovy.maven</groupId>
					<artifactId>gmaven-plugin</artifactId>
					<version>1.0</version>
					<executions>
						<execution>
							<phase>validate</phase>
							<goals>
								<goal>execute</goal>
							</goals>
							<configuration>
								<source>
									println project.properties['aai.project.version'];
									def versionArray;
									if (project.properties['aai.project.version'] != null) {
									versionArray =
									project.properties['aai.project.version'].split('\\.');
									}

									project.properties["project.major.version"] = versionArray[0];
									project.properties["project.minor.version"] = versionArray[1];
									project.properties['project.docker.latesttag.version'] =
									versionArray[0] + '.' + versionArray[1] + '-STAGING-latest';
									println 'New Tag for docker:' +
									project.properties['project.docker.latesttag.version'];
								</source>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>**/*WebSecurityConfig.*</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>2.4.1</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${project.basedir}/src/main/resources/etc/oxm</directory>
							<includes>
								<include>**/*</include>
							</includes>
							<followSymlinks>false</followSymlinks>
						</fileset>
						<fileset>
							<directory>${project.basedir}/src/main/resources/etc/dbedgerules</directory>
							<includes>
								<include>**/*</include>
							</includes>
							<followSymlinks>false</followSymlinks>
						</fileset>
						<fileset>
							<directory>${project.basedir}/src/main/resources/schema</directory>
							<includes>
								<include>**/oxm/**</include>
								<include>**/dbedgerules/**</include>
							</includes>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>exec-maven-plugin</artifactId>
				<groupId>org.codehaus.mojo</groupId>
				<version>1.6.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.4</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<runOrder>alphabetical</runOrder>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.antlr</groupId>
				<artifactId>antlr4-maven-plugin</artifactId>
				<version>${antlr.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>antlr4</goal>
						</goals>
						<configuration>
							<sourceDirectory>src/main/resources/antlr4</sourceDirectory>
							<!-- <outputDirectory>src/main/java/antlr4</outputDirectory> -->
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<mainClass>${start-class}</mainClass>
					<layout>ZIP</layout>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>copy-fat-jar</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${aai.build.directory}/lib/</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}/</directory>
									<includes>
										<include>${project.artifactId}-${project.version}.jar</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<descriptors>
						<descriptor>src/main/assembly/descriptor.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id> <!-- this is used for inheritance merges -->
						<phase>package</phase> <!-- bind to the packaging phase -->
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.8</version>
				<executions>
					<execution>
						<id>unpack-schema-dependency</id>
						<phase>initialize</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.onap.aai.schema-service</groupId>
									<artifactId>aai-schema</artifactId>
									<outputDirectory>${project.basedir}/src/main/resources/schema/</outputDirectory>
									<includes>**/oxm/**/*.xml</includes>
									<version>${aai.schema.service.version}</version>
								</artifactItem>
							</artifactItems>
							<!-- other configurations here -->
						</configuration>
					</execution>
					<execution>
						<id>unpack-edgerules-dependency</id>
						<phase>initialize</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.onap.aai.schema-service</groupId>
									<artifactId>aai-schema</artifactId>
									<outputDirectory>${project.basedir}/src/main/resources/schema/</outputDirectory>
									<includes>**/dbedgerules/**/*.json</includes>
									<version>${aai.schema.service.version}</version>
								</artifactItem>
							</artifactItems>
							<!-- other configurations here -->
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<configuration>
					<header>LICENSE.TXT</header>
					<includes>
						<include>src/main/java/**</include>
						<include>src/test/java/**</include>
						<include>pom.xml</include>
					</includes>
					<skipExistingHeaders>false</skipExistingHeaders>
					<skip>false</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<classesDirectory>${project.build.outputDirectory}</classesDirectory>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.swagger.core.v3</groupId>
				<artifactId>swagger-maven-plugin-jakarta</artifactId>
				<version>2.2.35</version>
				<executions>
					<execution>
						<id>generate-openapi</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>resolve</goal>
						</goals>
						<configuration>
							<attachSwaggerArtifact>false</attachSwaggerArtifact>
							<outputPath>${project.build.directory}/generated-swagger-docs</outputPath>
							<outputFileName>openapi</outputFileName>
							<outputFormat>JSON</outputFormat>
							<resourcePackages>
								<resourcePackage>org.onap.aai</resourcePackage>
							</resourcePackages>
							<prettyPrint>true</prettyPrint>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
